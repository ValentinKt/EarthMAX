name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          chore
          ci
          build
          revert

    - name: Check for breaking changes
      run: |
        if git diff --name-only origin/main...HEAD | grep -E "(build\.gradle|settings\.gradle|gradle\.properties|proguard)" > /dev/null; then
          echo "‚ö†Ô∏è Build configuration changes detected. Please ensure backward compatibility."
          echo "::warning::Build configuration changes detected"
        fi

    - name: Check file size limits
      run: |
        find . -type f -size +10M -not -path "./.git/*" -not -path "./build/*" | while read file; do
          echo "::error::File $file exceeds 10MB limit"
          exit 1
        done

  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Run Detekt
      run: ./gradlew detekt

    - name: Run Ktlint
      run: ./gradlew ktlintCheck

    - name: Upload Detekt results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: build/reports/detekt/detekt.sarif

    - name: Comment PR with code quality results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîç Code Quality Report\n\n';
          
          // Check if detekt report exists
          if (fs.existsSync('build/reports/detekt/detekt.xml')) {
            comment += '‚úÖ Detekt analysis completed\n';
          } else {
            comment += '‚ùå Detekt analysis failed\n';
          }
          
          // Check if ktlint passed
          if (process.env.KTLINT_EXIT_CODE === '0') {
            comment += '‚úÖ Ktlint formatting check passed\n';
          } else {
            comment += '‚ùå Ktlint formatting issues found\n';
          }
          
          comment += '\nPlease review the checks above before merging.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Run dependency vulnerability check
      run: ./gradlew dependencyCheckAnalyze

    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: build/reports/dependency-check-report.html

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Run tests with coverage
      run: ./gradlew testDebugUnitTest jacocoTestReport

    - name: Generate coverage report
      uses: codecov/codecov-action@v4
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Comment PR with coverage
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('build/reports/jacoco/test/jacocoTestReport.xml')) {
            const comment = `## üìä Test Coverage Report
            
            Coverage report has been generated and uploaded to Codecov.
            Please ensure new code maintains adequate test coverage.
            
            [View detailed coverage report](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }